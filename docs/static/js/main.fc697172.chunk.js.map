{"version":3,"sources":["constants.js","utilFunctions.js","App.js","redux/actions.js","redux/actionTypes.js","serviceWorker.js","redux/store.js","index.js"],"names":["STARTED","gridIdxToCoord","idx","y","Math","floor","x","updateEventStat","status","props","evt","propertyName","updateEventStatus","_dispatchInstances","key","connect","state","showModal","get","selectedEvent","events","myTest","showEventValidationAlert","logText","openEventDialog","evtId","type","payload","onHideModal","saveEvent","evtType","succeed","time","evtSucceed","evtTime","id","initSequence","currentlySelectedEvent","selectedEventType","selectedEventSucceed","selectedEventTime","logs","split","map","element","React","createElement","flat","className","onClickCallback","bind","classNames","eventInfo","addEventSign","hasBeenStarted","transitionStyle","transition","progressClassNames","onClick","onTransitionEnd","CSSTransition","in","timeout","style","gridDivs","Modal","show","onHide","size","aria-labelledby","centered","Header","closeButton","Title","Body","Alert","variant","defaultValue","value","placeholder","Footer","Button","document","getElementById","evtSuccess","saveFnc","Boolean","window","location","hostname","match","initialState","Map","editEventDialog","isOpen","formIsInvalid","startTimestamp","List","Array","eventDetails","isClickable","data","willSucceed","update","buildInitialEvent","updateClickableEvents","isSet","isFirstRow","hasSetEventAbove","canRunParallel","printLog","startTime","eventDesc","Date","getTime","calculateTimeSinceStart","createStore","action","dialog","parseInt","isNaN","event","updatingId","nextInChain","updatedEventState","text","newState","console","log","join","rootElement","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAAaA,EAAU,UCUVC,EAAiB,SAACC,GAC7B,MAAO,CACLC,EAAGC,KAAKC,MAAMH,EAAI,GAClBI,EAAGJ,EAAI,ICGX,SAASK,EAAiBC,EAAOC,EAAMC,GFfd,cEgBpBF,GAA6C,UAArBE,EAAIC,cAC7BF,EAAMG,kBAAkBJ,EAAOE,EAAIG,mBAAmBC,KACrDN,IAAWR,GACZS,EAAMG,kBAAkBJ,EAAOE,EAAIG,mBAAmBC,KAgI3CC,mBAZf,SAAyBC,GACvB,MAAO,CACLC,UAAWD,EAAME,IAAI,mBAAmBA,IAAI,UAC5CC,cAAeH,EAAME,IAAI,iBACzBE,OAAQJ,EAAME,IAAI,UAClBG,OAAQL,EAAME,IAAI,UAClBI,yBAA0BN,EAAME,IAAI,mBAAmBA,IAAI,iBAC3DK,QAASP,EAAME,IAAI,cAOrB,CACEM,gBC/I2B,SAACC,GAAD,MAAY,CACzCC,KCT+B,iBDU/BC,QAAS,CAACF,MAAOA,KD8IfG,YC3IuB,iBAAO,CAChCF,KCbgC,oBFwJ9BG,UCxIqB,SAACC,EAAQC,EAAQC,GAAjB,MAA2B,CAClDN,KChBwB,aDiBxBC,QAAS,CACPG,QAASA,EACTG,WAAYF,EACZG,QAASF,KDoITpB,kBChI6B,SAACJ,EAAO2B,GAAR,MAAgB,CAC/CT,KCxB0B,eDyB1BC,QAAS,CACPQ,GAAIA,EACJ3B,OAAQA,KD6HR4B,aCzHwB,iBAAO,CACjCV,KC/B2B,mBFgJdX,EAhFf,SAAaN,GAAQ,IAAD,EACHR,EAAeQ,EAAMU,eAA7BhB,EADW,EACXA,EAAGG,EADQ,EACRA,EACJ+B,EAAkD,OAAxB5B,EAAMU,cAA0BV,EAAMW,OAAOF,IAAIT,EAAMU,eAAiB,KAClGmB,EAAqBD,EAA0BA,EAAuBnB,IAAI,QAAU,GACpFqB,EAAwBF,EAA0BA,EAAuBnB,IAAI,eAAiB,GAC9FsB,EAAqBH,EAA0BA,EAAuBnB,IAAI,QAAU,GACpFuB,EAAOhC,EAAMc,QAAQmB,MAAM,aAAaC,KAAI,SAACC,EAAQ1C,GAAT,MAAe,CAAC0C,EAAQC,IAAMC,cAAc,KAAK,CAAChC,IAAIZ,QAAQ6C,OAEhH,OACE,oCACE,uDACA,kDACA,uBAAGjC,IAAK,GAAR,kNAKA,uBAAGA,IAAK,GAAR,iEAGA,yBAAKkC,UAAU,cAjErB,SAAkBvC,GAChB,OAAOA,EAAMW,OAAOuB,KAAI,SAACjC,EAAIR,GAAQ,IAAD,EACnBD,EAAeC,GAAvBC,EAD2B,EAC3BA,EAAGG,EADwB,EACxBA,EACJ2C,EAAmBvC,EAAIQ,IAAI,eAAkBT,EAAMe,gBAAgB0B,KAAK,KAAKhD,GAAO,KACpFiD,EAAczC,EAAIQ,IAAI,eAAkB,gBAAkB,QAC1DkC,EAAiC,OAApB1C,EAAIQ,IAAI,QAAT,UAAgCR,EAAIQ,IAAI,QAAxC,YAAoDR,EAAIQ,IAAI,eAAkB,IAAM,IAApF,YAA2FR,EAAIQ,IAAI,QAAnG,KAAgH,KAC5HmC,EAAoC,OAApB3C,EAAIQ,IAAI,SAAoBR,EAAIQ,IAAI,eAAkB,IAAM,KAC5EoC,EAAkB5C,EAAIQ,IAAI,YAAclB,GF7BzB,cE6BoCU,EAAIQ,IAAI,UAC3DqC,EAAkB,CAACC,WAAW,SAAD,OAAW9C,EAAIQ,IAAI,QAAnB,aAC7BuC,EAAsB/C,EAAIQ,IAAI,eAAkB,oBAAsB,oBAI5E,OAEE,yBAAKJ,IAAKZ,EAAKwD,QAAST,EAAiBD,UAAWG,EAAYQ,gBAAiBpD,EAAgB2C,KAAK,KFrCnF,YEqCkGzC,IACrH,kBAACmD,EAAA,EAAD,CACEC,GAAIP,EACJN,UAAWS,EACXK,QAAS,KAET,yBAAKd,UAAU,OAAOe,MAAOR,KAE7B,yBAAKP,UAAU,aACZK,GAEH,yBAAKL,UAAU,cACZI,GAEH,yBAAKJ,UAAU,aAAf,IACI7C,EADJ,IACQG,EADR,SAqCC0D,CAASvD,IAEZ,4BAAQuC,UAAU,QAAQU,QAASjD,EAAM2B,cAAzC,SACA,uBAAGY,UAAU,qBAAb,iDACA,yBAAKA,UAAU,gBAAgBP,GAC/B,kBAACwB,EAAA,EAAD,CACEC,KAAMzD,EAAMQ,UACZkD,OAAQ1D,EAAMmB,YACdwC,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,GAER,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,CAAatC,GAAG,iCAAhB,sBACsBhC,EADtB,KAC2BG,EAD3B,MAIF,kBAAC2D,EAAA,EAAMS,KAAP,KACE,kBAACC,EAAA,EAAD,CAAOC,QAAS,UAAWV,KAAMzD,EAAMa,0BAAvC,4BACA,4CAEE,4BAAQ0B,UAAU,cAAcb,GAAG,kBAAkB0C,aAAcvC,GACjE,4BAAQwC,MAAM,KACd,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,UALJ,mBAQE,4BAAQ9B,UAAU,cAAcb,GAAG,qBAAqB0C,aAActC,GACpE,4BAAQuC,MAAM,KACd,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,WAGJ,oDAEE,2BAAO9B,UAAU,cAAcb,GAAG,iBAAiB4C,YAAY,qBAAqBF,aAAcrC,MAGtG,kBAACyB,EAAA,EAAMe,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQvB,QAAS,kBApE3B,SAAkBjD,GAChB,IAAMqB,EAAUoD,SAASC,eAAe,mBAAmBL,MACrDM,EAAaF,SAASC,eAAe,sBAAsBL,MAC3D5C,EAAUgD,SAASC,eAAe,kBAAkBL,MAE1DrE,EAAMoB,UAAUC,EAAQsD,EAAWlD,GA+DNmD,CAAQ5E,KAA7B,cGpHU6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCNAC,EAAeC,YAAI,CACvBC,gBAAiBD,YAAI,CACnBE,QAAQ,EACRC,eAAe,IAEjBxE,QAAS,GACTJ,cAAe,KACf6E,eAAgB,KAChB5E,OAAQ6E,YAAKC,MAAM,KAAKvD,KAAI,SAACC,EAAQ1C,GAAT,OAG9B,SAA2BA,GACzB,IAAMiG,EAAeP,YAAI,CACvBQ,aAAa,EACb1E,KAAM,KACN2E,KAAM,KACNrE,KAAM,KACNsE,YAAa,KACb9F,ON5BqB,cM8BvB,GAAW,IAARN,EACD,OAAOiG,EAAaI,OAAO,eAAc,kBAAI,KAE/C,OAAOJ,EAfoCK,CAAkBtG,QAkB/D,SAASuG,EAAsBrF,GAE7B,OAAOA,EAAOuB,KAAK,SAACjC,EAAIR,GACtB,IAAMwG,EAAQhG,EAAIQ,IAAI,QAChByF,EAAazG,EAAM,EACnB0G,GAAoBD,GAAwD,OAAlCvF,EAAOF,IAAIhB,EAAI,GAAGgB,IAAI,QAChE2F,EAA0B,IAAR3G,GAAqByG,GAAgD,OAAlCvF,EAAOF,IAAIhB,EAAI,GAAGgB,IAAI,QAEjF,OAAGwF,GAASE,GAAoBC,EACvBnG,EAAI6F,OAAO,eAAc,kBAAI,KAE/B7F,EAAI6F,OAAO,eAAc,kBAAI,QAQxC,SAASO,EAAU5G,EAAIM,EAAOuG,GAAY,IAAD,EACtB9G,EAAeC,GAAxBC,EAD+B,EAC/BA,EAAGG,EAD4B,EAC5BA,EACL0G,EAAaxG,IAAWR,EAAW,UAAY,YACnD,MAAM,gBAAN,OAAuBG,EAAvB,YAA4BG,EAA5B,iBAAsC0G,EAAtC,eAPJ,SAAkCD,GAChC,OAAO3G,KAAKC,QAAO,IAAI4G,MAAOC,UAAYH,GAAa,KAMCI,CAAwBJ,GAA9E,sBAyFWK,mBAtFf,WAAiD,IAA/BpG,EAA8B,uDAAtB2E,EAAc0B,EAAQ,uCACxChB,EAAOgB,EAAO1F,QACpB,OAAQ0F,EAAO3F,MACb,IFlE6B,iBEmE3B,OAAOV,EAAMuF,OAAO,mBAAmB,SAACe,GAAD,OAAYA,EAAOf,OAAO,UAAS,kBAAI,QACjEA,OAAO,iBAAiB,kBAAMF,EAAK5E,SAElD,IFrE8B,kBEsE5B,OAAOT,EAAMuF,OAAO,iBAAiB,kBAAI,QAC5BA,OAAO,mBAAmB,SAACe,GAAD,OAAYA,EAAOf,OAAO,UAAS,kBAAI,KACpBA,OAAO,iBAAgB,kBAAI,QAGvF,IF1EsB,aE2EpB,IAAMrE,EAAUqF,SAASlB,EAAKnE,SAC9B,MAAoB,KAAjBmE,EAAKvE,SAAsC,KAApBuE,EAAKpE,YAAsBuF,MAAMtF,GAYpDlB,EAAMuF,OAAO,mBAAmB,SAACe,GAAD,OAAYA,EAAOf,OAAO,iBAAgB,kBAAI,QAX5EvF,EAAMuF,OAAO,mBAAmB,SAACe,GAAD,OAAYA,EAAOf,OAAO,UAAS,kBAAI,QACjEA,OAAO,iBAAiB,kBAAI,QAC5BA,OAAO,UACA,SAACnF,GAAD,OACEqF,EAAsBrF,EAAOmF,OAAOvF,EAAME,IAAI,kBACV,SAACuG,GAAD,OACEA,EAAMlB,OAAO,QAAO,kBAAIF,EAAKvE,WACvByE,OAAO,eAAc,iBAAyB,SAApBF,EAAKpE,cAC/BsE,OAAO,QAAO,kBAAIrE,YAKxF,IFzFwB,eE0FtB,IAAMmE,EAAOgB,EAAO1F,QACd+F,EAAaH,SAASlB,EAAKlE,IAC3BwF,EAAeD,EAAa,GAAMA,EAAa,EAAI,KACnDhB,EAAQ,SAACjF,GAAD,OAAsB,OAAVA,GAAkE,OAA/CT,EAAME,IAAI,UAAUA,IAAIO,GAAOP,IAAI,SAEhF,GNjGmB,cMiGfmF,EAAK7F,OAAsB,CAC7B,IAAMoH,EAAoB5G,EAAMuF,OAAO,UACL,SAACnF,GAAD,OACEA,EAAOmF,OAAOF,EAAKlE,IACL,SAACsF,GAAD,OACEA,EAAMlB,OAAO,UACA,iBNvGhD,qBMwGeA,OAAO,WACC,SAACsB,GAAD,OAAQA,EAAKf,EAASY,ENzG7C,YMyGkE1G,EAAME,IAAI,sBAC7F,OAAGwF,EAAMiB,GACAC,EAAkBrB,OAAO,UACA,SAACnF,GAAD,OACEA,EAAOmF,OAAOoB,GACA,SAACF,GAAD,OACEA,EAAMlB,OAAO,UACA,kBAAIvG,WAC1CuG,OAAO,WACA,SAACsB,GAAD,OAAQA,EAAKf,EAASa,EAAY3H,EAAQgB,EAAME,IAAI,sBAC/E0G,EACF,GAAIvB,EAAK7F,SAAWR,EACzB,OAAOgB,EAAMuF,OAAO,UACA,SAACnF,GAAD,OACEA,EAAOmF,OAAOF,EAAKlE,IACL,SAACsF,GAAD,OACEA,EAAMlB,OAAO,UACA,kBAAIvG,WAC1CuG,OAAO,WACA,SAACsB,GAAD,OAAQA,EAAKf,EAAST,EAAKlE,GAAGnC,EAAQgB,EAAME,IAAI,sBACtE,MAEF,IF5HyB,gBE6HvB,IAAM4G,EAAW9G,EAAMuF,OAAO,UACV,SAACnF,GAAD,OACEA,EAAOuB,KAAI,SAAC8E,EAAMvH,GACN,OAAGA,EAAM,GAA2B,OAAtBuH,EAAMvG,IAAI,QACfuG,EAAMlB,OAAO,UAAS,kBAAIvG,KAC5ByH,QAC5BlB,OAAO,kBAAiB,kBAAI,IAAIU,MAAOC,aAEpD,OAAOY,EAASvB,OAAO,WACP,SAACsB,GAAD,OAAQC,EAAS5G,IAAI,UAAUyB,KAAI,SAAC8E,EAAMvH,GAIR,OAHA6H,QAAQC,IAAIP,EAAMvG,IAAI,WACtB6G,QAAQC,IAAIhI,GACZ+H,QAAQC,IAAIP,EAAMvG,IAAI,YAAclB,GAC5ByH,EAAMvG,IAAI,YAAclB,EAAW6H,EAAKf,EAAS5G,EAAIF,EAAQ8H,EAAS5G,IAAI,mBAAqB2G,KAAOI,KAAK,OACvK,QACE,OAAOjH,MCtIPkH,EAAchD,SAASC,eAAe,QAC5CgD,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFH,GFoHI,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.fc697172.chunk.js","sourcesContent":["export const STARTED = 'STARTED'\r\nexport const COMPLETED = 'COMPLETED'\r\nexport const UNSTARTED = 'UNSTARTED'\r\n","\r\nexport const createUUID = () => {\r\n  // eslint-disable-next-line\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    // eslint-disable-next-line\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8)\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\nexport const gridIdxToCoord = (idx) => {\r\n  return {\r\n    y: Math.floor(idx/6),\r\n    x: idx%6\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  openEventDialog,\r\n  onHideModal,\r\n  saveEvent,\r\n  updateEventStatus,\r\n  initSequence\r\n} from './redux/actions'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { STARTED, COMPLETED } from './constants'\r\nimport { gridIdxToCoord } from './utilFunctions'\r\n\r\nfunction updateEventStat (status,props,evt) {\r\n  if(status === COMPLETED && evt.propertyName === \"width\")\r\n    props.updateEventStatus(status,evt._dispatchInstances.key)\r\n  if(status === STARTED)\r\n    props.updateEventStatus(status,evt._dispatchInstances.key)\r\n}\r\n\r\nfunction gridDivs(props) {\r\n  return props.events.map((evt,idx)=> {\r\n    const {y, x} = gridIdxToCoord(idx)\r\n    const onClickCallback = (evt.get('isClickable')) ? props.openEventDialog.bind(null,idx) : null\r\n    const classNames = (evt.get('isClickable')) ? \"event enabled\" : \"event\"\r\n    const eventInfo = (evt.get('type') !== null) ? `${evt.get('type')},${(evt.get('willSucceed')) ? \"t\" : \"f\"},${evt.get('time')}s` : null\r\n    const addEventSign = (evt.get('type') === null && evt.get('isClickable')) ? \"+\" : null\r\n    const hasBeenStarted = (evt.get('status') === STARTED || evt.get('status') === COMPLETED)\r\n    const transitionStyle = {transition: `width ${evt.get('time')}s linear`}\r\n    const progressClassNames = (evt.get('willSucceed')) ? \"progress-bar pass\" : \"progress-bar fail\"\r\n\r\n    /*add a tooltip which points to the left and right of each event and explains what is happening with vocab\r\n      and there is a color wipe on the div left to right like a progress bar*/\r\n    return (\r\n\r\n      <div key={idx} onClick={onClickCallback} className={classNames} onTransitionEnd={updateEventStat.bind(null,COMPLETED,props)} >\r\n      <CSSTransition\r\n        in={hasBeenStarted}\r\n        className={progressClassNames}\r\n        timeout={100}\r\n      >\r\n        <div className=\"test\" style={transitionStyle}></div>\r\n      </CSSTransition>\r\n        <div className=\"add-event\">\r\n          {addEventSign}\r\n        </div>\r\n        <div className=\"event-info\">\r\n          {eventInfo}\r\n        </div>\r\n        <div className=\"coord-box\">\r\n          [{y},{x}]\r\n        </div>\r\n      </div>\r\n    )\r\n  })\r\n}\r\n\r\nfunction saveFnc (props) {\r\n  const evtType = document.getElementById('eventTypeSelect').value\r\n  const evtSuccess = document.getElementById('eventSucceedSelect').value\r\n  const evtTime = document.getElementById('eventTimeInput').value\r\n\r\n  props.saveEvent(evtType,evtSuccess,evtTime)\r\n}\r\n\r\nfunction App(props) {\r\n  const {y, x} = gridIdxToCoord(props.selectedEvent)\r\n  const currentlySelectedEvent = (props.selectedEvent !== null) ? props.events.get(props.selectedEvent) : null\r\n  const selectedEventType = (currentlySelectedEvent) ? currentlySelectedEvent.get('type') : \"\"\r\n  const selectedEventSucceed = (currentlySelectedEvent) ? currentlySelectedEvent.get('willSucceed') : \"\"\r\n  const selectedEventTime = (currentlySelectedEvent) ? currentlySelectedEvent.get('time') : \"\"\r\n  const logs = props.logText.split('|newline|').map((element,idx)=>[element,React.createElement('br',{key:idx})]).flat()\r\n\r\n  return (\r\n    <>\r\n      <h1>Async Events Visualizer</h1>\r\n      <h2>(eventually game?)</h2>\r\n      <p key={1}>\r\n        This version doesn't have everything implemented, but it gives you a\r\n        sense of the direction I am headed in. Stick with making 'ajax' events\r\n        that will either pass or fail and will take X seconds to complete.\r\n      </p>\r\n      <p key={2}>\r\n        X axis is memory. Y axis is time. Let me know what you think!\r\n      </p>\r\n      <div className=\"event-grid\">\r\n        {gridDivs(props)}\r\n      </div>\r\n      <button className=\"start\" onClick={props.initSequence}>Start</button>\r\n      <p className=\"faux-console-desc\">Here is the console which will log the events</p>\r\n      <div className=\"faux-console\">{logs}</div>\r\n      <Modal\r\n        show={props.showModal}\r\n        onHide={props.onHideModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create/Edit Event [{y}][{x}]\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Alert variant={'primary'} show={props.showEventValidationAlert}>Every field is required.</Alert>\r\n          <p>\r\n            Type of Event:\r\n            <select className=\"event-input\" id=\"eventTypeSelect\" defaultValue={selectedEventType}>\r\n              <option value=\"\"></option>\r\n              <option value=\"ajax\">ajax</option>\r\n              <option value=\"catch\">catch</option>\r\n            </select>\r\n            Will it succeed?\r\n            <select className=\"event-input\" id=\"eventSucceedSelect\" defaultValue={selectedEventSucceed}>\r\n              <option value=\"\"></option>\r\n              <option value=\"true\">true</option>\r\n              <option value=\"false\">false</option>\r\n            </select>\r\n          </p>\r\n          <p>\r\n            How long will it take?\r\n            <input className=\"event-input\" id=\"eventTimeInput\" placeholder=\"Integer in seconds\" defaultValue={selectedEventTime}></input>\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={()=>saveFnc(props)}>Save</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    showModal: state.get('editEventDialog').get('isOpen'),\r\n    selectedEvent: state.get('selectedEvent'),\r\n    events: state.get('events'),\r\n    myTest: state.get('myTest'),\r\n    showEventValidationAlert: state.get('editEventDialog').get('formIsInvalid'),\r\n    logText: state.get('logText')\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    openEventDialog,\r\n    onHideModal,\r\n    saveEvent,\r\n    updateEventStatus,\r\n    initSequence\r\n  }\r\n)(App)\r\n","import {\r\n  OPEN_EVENT_DIALOG,\r\n  CLOSE_EVENT_DIALOG,\r\n  SAVE_EVENT,\r\n  UPDATE_EVENT,\r\n  INIT_SEQUENCE\r\n} from './actionTypes'\r\n\r\nexport const openEventDialog = (evtId) => ({\r\n  type: OPEN_EVENT_DIALOG,\r\n  payload: {evtId: evtId}\r\n})\r\n\r\nexport const onHideModal = () => ({\r\n  type: CLOSE_EVENT_DIALOG\r\n})\r\n\r\nexport const saveEvent = (evtType,succeed,time) => ({\r\n  type: SAVE_EVENT,\r\n  payload: {\r\n    evtType: evtType,\r\n    evtSucceed: succeed,\r\n    evtTime: time\r\n  }\r\n})\r\n\r\nexport const updateEventStatus = (status,id) => ({\r\n  type: UPDATE_EVENT,\r\n  payload: {\r\n    id: id,\r\n    status: status\r\n  }\r\n})\r\n\r\nexport const initSequence = () => ({\r\n  type: INIT_SEQUENCE\r\n})\r\n","export const OPEN_EVENT_DIALOG = 'OPEN_EVENT_DIA'\r\nexport const CLOSE_EVENT_DIALOG = 'CLOSE_EVENT_DIA'\r\nexport const SAVE_EVENT = 'SAVE_EVENT'\r\nexport const UPDATE_EVENT = 'UPDATE_EVENT'\r\nexport const INIT_SEQUENCE = 'INIT_SEQUENCE'\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux'\r\nimport {\r\n  OPEN_EVENT_DIALOG,\r\n  CLOSE_EVENT_DIALOG,\r\n  SAVE_EVENT,\r\n  UPDATE_EVENT,\r\n  INIT_SEQUENCE\r\n} from './actionTypes'\r\nimport { Map, List } from 'immutable'\r\nimport { UNSTARTED, STARTED, COMPLETED } from '../constants'\r\nimport { gridIdxToCoord } from '../utilFunctions'\r\n\r\nconst initialState = Map({\r\n  editEventDialog: Map({\r\n    isOpen: false,\r\n    formIsInvalid: false\r\n  }),\r\n  logText: \"\",\r\n  selectedEvent: null,\r\n  startTimestamp: null,\r\n  events: List(Array(24)).map((element,idx)=>buildInitialEvent(idx))\r\n})\r\n\r\nfunction buildInitialEvent(idx) {\r\n  const eventDetails = Map({\r\n    isClickable: false,\r\n    type: null,\r\n    data: null,\r\n    time: null,\r\n    willSucceed: null,\r\n    status: UNSTARTED /* \"UNSTARTED\" \"STARTED\" \"COMPLETE\" */\r\n  })\r\n  if(idx === 0) {\r\n    return eventDetails.update('isClickable',()=>true)\r\n  }\r\n  return eventDetails\r\n}\r\n\r\nfunction updateClickableEvents(events) {\r\n  //use the type property of each event to determine if it has been set\r\n  return events.map( (evt,idx) => {\r\n    const isSet = evt.get('type')\r\n    const isFirstRow = idx < 6\r\n    const hasSetEventAbove = (isFirstRow) ? false : events.get(idx-6).get('type') !== null\r\n    const canRunParallel = (idx === 0) ? true : (isFirstRow && events.get(idx-1).get('type') !== null)\r\n\r\n    if(isSet || hasSetEventAbove || canRunParallel) {\r\n      return evt.update('isClickable',()=>true)\r\n    }\r\n    return evt.update('isClickable',()=>false)\r\n  })\r\n}\r\n\r\nfunction calculateTimeSinceStart (startTime) {\r\n  return Math.floor((new Date().getTime() - startTime) / 1000)\r\n}\r\n\r\nfunction printLog (idx,status,startTime) {\r\n  const { y, x } = gridIdxToCoord(idx)\r\n  const eventDesc = (status === STARTED) ? 'started' : 'completed'\r\n    return `> The event [${y},${x}] has ${eventDesc} at ${calculateTimeSinceStart(startTime)} seconds.|newline|`\r\n}\r\n\r\nfunction reducer (state = initialState, action) {\r\n  const data = action.payload\r\n  switch (action.type) {\r\n    case OPEN_EVENT_DIALOG: {\r\n      return state.update('editEventDialog', (dialog) => dialog.update('isOpen',()=>true))\r\n                  .update('selectedEvent', () => data.evtId)\r\n    }\r\n    case CLOSE_EVENT_DIALOG: {\r\n      return state.update('selectedEvent', ()=>null)\r\n                  .update('editEventDialog', (dialog) => dialog.update('isOpen',()=>false)\r\n                                                               .update('formIsInvalid',()=>false))\r\n\r\n    }\r\n    case SAVE_EVENT: {\r\n      const evtTime = parseInt(data.evtTime)\r\n      if(data.evtType !== \"\" && data.evtSucceed !== \"\" && !isNaN(evtTime)) {\r\n        return state.update('editEventDialog', (dialog) => dialog.update('isOpen',()=>false))\r\n                    .update('selectedEvent', ()=>null)\r\n                    .update('events',\r\n                            (events)=>\r\n                              updateClickableEvents(events.update(state.get('selectedEvent'),\r\n                                                                  (event) =>\r\n                                                                    event.update('type',()=>data.evtType)\r\n                                                                         .update('willSucceed',()=>(data.evtSucceed === \"true\") ? true : false)\r\n                                                                         .update('time',()=>evtTime))))\r\n      }\r\n      //else add the warning message that the form was invalid\r\n      return state.update('editEventDialog', (dialog) => dialog.update('formIsInvalid',()=>true))\r\n    }\r\n    case UPDATE_EVENT: {\r\n      const data = action.payload\r\n      const updatingId = parseInt(data.id)\r\n      const nextInChain = (updatingId < 18) ? updatingId + 6 : null\r\n      const isSet = (evtId) => (evtId !== null) ? (state.get('events').get(evtId).get('type') !== null) : false\r\n\r\n      if (data.status === COMPLETED) {\r\n        const updatedEventState = state.update('events',\r\n                                          (events)=>\r\n                                            events.update(data.id,\r\n                                                          (event)=>\r\n                                                            event.update('status',\r\n                                                                         ()=>COMPLETED)))\r\n                                       .update('logText',\r\n                                                (text)=>text+printLog(updatingId,COMPLETED,state.get('startTimestamp')))\r\n        if(isSet(nextInChain)) {\r\n          return updatedEventState.update('events',\r\n                                          (events)=>\r\n                                            events.update(nextInChain,\r\n                                                          (event)=>\r\n                                                            event.update('status',\r\n                                                                         ()=>STARTED)))\r\n                                  .update('logText',\r\n                                          (text)=>text+printLog(nextInChain,STARTED,state.get('startTimestamp')))}\r\n        return updatedEventState\r\n      } else if (data.status === STARTED) {\r\n        return state.update('events',\r\n                            (events)=>\r\n                              events.update(data.id,\r\n                                            (event)=>\r\n                                              event.update('status',\r\n                                                           ()=>STARTED)))\r\n                    .update('logText',\r\n                            (text)=>text+printLog(data.id,STARTED,state.get('startTimestamp')))}\r\n      break\r\n    }\r\n    case INIT_SEQUENCE: {\r\n      const newState = state.update('events',\r\n                          (events)=>\r\n                            events.map((event,idx)=> {\r\n                                        if(idx < 6 && event.get('type') !== null) {\r\n                                          return event.update('status',()=>STARTED)}\r\n                                        return event}))\r\n                  .update('startTimestamp',()=>new Date().getTime())\r\n\r\n      return newState.update('logText',\r\n                      (text)=>newState.get('events').map((event,idx)=> {\r\n                                                        console.log(event.get('status'))\r\n                                                        console.log(STARTED)\r\n                                                        console.log(event.get('status') === STARTED)\r\n                                                        return (event.get('status') === STARTED) ? text+printLog(idx,STARTED,newState.get('startTimestamp')) : text}).join(''))}\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default createStore(reducer)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}